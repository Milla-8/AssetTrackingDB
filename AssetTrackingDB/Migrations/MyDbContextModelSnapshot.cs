// <auto-generated />
using AssetTrackingDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetTrackingDB.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssetTrackingDB.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("PurchaseDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId");

                    b.HasIndex("OfficeId");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetId = 1,
                            Brand = "Apple",
                            Category = "Laptop",
                            Configuration = "8 GB RAM, 256GB SSD",
                            Model = "MacBook Pro",
                            OfficeId = 1,
                            Price = 15000f,
                            PurchaseDate = "2022-12-10"
                        },
                        new
                        {
                            AssetId = 2,
                            Brand = "Samsung",
                            Category = "Phone",
                            Configuration = "512GB",
                            Model = "S24",
                            OfficeId = 1,
                            Price = 20000f,
                            PurchaseDate = "2024-11-20"
                        },
                        new
                        {
                            AssetId = 3,
                            Brand = "Lenovo",
                            Category = "Laptop",
                            Configuration = "16GB RAM, 512GB SSD",
                            Model = "ThinkPad",
                            OfficeId = 2,
                            Price = 15499f,
                            PurchaseDate = "2023-05-17"
                        },
                        new
                        {
                            AssetId = 4,
                            Brand = "Apple",
                            Category = "Stationary Computer",
                            Configuration = "16GB RAM, 1TB SSD",
                            Model = "iMac",
                            OfficeId = 3,
                            Price = 25000f,
                            PurchaseDate = "2024-02-05"
                        });
                });

            modelBuilder.Entity("AssetTrackingDB.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            CurrencyName = "Svenska Kronor",
                            ShortName = "SEK"
                        },
                        new
                        {
                            CurrencyId = 2,
                            CurrencyName = "US Dollars",
                            ShortName = "USD"
                        });
                });

            modelBuilder.Entity("AssetTrackingDB.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("OfficeId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            OfficeId = 1,
                            City = "Stockholm",
                            Country = "Sweden",
                            CurrencyId = 1
                        },
                        new
                        {
                            OfficeId = 2,
                            City = "Malmö",
                            Country = "Sweden",
                            CurrencyId = 1
                        },
                        new
                        {
                            OfficeId = 3,
                            City = "New York",
                            Country = "USA",
                            CurrencyId = 2
                        });
                });

            modelBuilder.Entity("AssetTrackingDB.Asset", b =>
                {
                    b.HasOne("AssetTrackingDB.Office", "Office")
                        .WithMany("AssetList")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("AssetTrackingDB.Office", b =>
                {
                    b.HasOne("AssetTrackingDB.Currency", "Currency")
                        .WithMany("OfficeList")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("AssetTrackingDB.Currency", b =>
                {
                    b.Navigation("OfficeList");
                });

            modelBuilder.Entity("AssetTrackingDB.Office", b =>
                {
                    b.Navigation("AssetList");
                });
#pragma warning restore 612, 618
        }
    }
}
